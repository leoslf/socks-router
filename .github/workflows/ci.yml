name: CI

on:
  push:
    branches:
      - main
      - master
      - develop
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
  workflow_dispatch:

jobs:
  ci:
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]
        poetry-version: ["1.7.1"]
        os: ["ubuntu-22.04", "macos-latest"]

    timeout-minutes: 15
    runs-on: ${{ matrix.os }}
    env:
      TERM: xterm-color
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup sshd
        uses: ./.github/actions/setup-sshd

      - name: Write ~/.ssh/config
        shell: bash
        run: |
          cat <<- EOF > ~/.ssh/config
          Host *
            AddKeysToAgent yes

          Host localhost 127.0.0.1 ::1
            IdentitiesOnly yes
            IdentityFile ~/.ssh/id_rsa
          EOF

      - name: Setup ssh-agent
        shell: bash
        run: |
          start-ssh-agent() {
            set +e
            # ensure agent is running
            ssh-add -l &> /dev/null
            if [ "$?" -eq 2 ]; then
              # could not open a connection to your auth agent
              # load stored agent connection info
              test -r $HOME/.ssh-agent && eval "$(< $HOME/.ssh-agent)" > /dev/null

              ssh-add -l &> /dev/null
              if [ "$?" -eq 2 ]; then
                # start agent and store agent connection info
                eval "$(umask 066; ssh-agent | tee $HOME/.ssh-agent)" > /dev/null
              fi
            fi
          }
          start-ssh-agent

      - name: Test ssh connection to sshd - 127.0.0.1
        shell: bash
        run: |
          ssh -vvv -o StrictHostKeyChecking=accept-new 127.0.0.1 true

      - name: Test ssh connection to sshd - ::1
        shell: bash
        run: |
          ssh -vvv -o StrictHostKeyChecking=accept-new ::1 true

      - name: Test ssh connection to sshd - localhost
        shell: bash
        run: |
          ssh -vvv -o StrictHostKeyChecking=accept-new localhost true


      - name: Setup poetry
        uses: ./.github/actions/setup-poetry
        with:
          python-version: ${{ matrix.python-version }}
          poetry-version: ${{ matrix.poetry-version }}

      - name: Install the project dependencies
        run: poetry install

      - name: Linting
        run: poetry run ruff check .

      - name: Type checking
        run: poetry run mypy . --non-interactive

      - name: Run the automated tests
        run: >-
          poetry run pytest
          --color=yes
          -s
          -o junit_logging=all
          -o junit_suite_name=${{ matrix.os }}-python${{ matrix.python-version }}-poetry${{ matrix.poetry-version }}
          --junit-xml=.output/unittest/${{ matrix.os }}-python${{ matrix.python-version }}-poetry${{ matrix.poetry-version }}.xml
          --cov-report xml:.output/coverage/${{ matrix.os }}-python${{ matrix.python-version }}-poetry${{ matrix.poetry-version }}.xml

      - name: Upload artifacts (unittest reports)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unittest-reports-${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.poetry-version }}
          path: .output/unittest/**/*.xml

      - name: Upload artifacts (coverage reports)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports-${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.poetry-version }}
          path: .output/coverage/**/*.xml

  consolidation:
    needs: ci
    if: always()
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]
        poetry-version: ["1.7.1"]
        os: ["ubuntu-22.04"]

    runs-on: ${{ matrix.os }}
    env:
      TERM: xterm-color
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: unittest-reports-*
          path: .output/unittest
          merge-multiple: true

      - name: Setup poetry
        uses: ./.github/actions/setup-poetry
        with:
          python-version: ${{ matrix.python-version }}
          poetry-version: ${{ matrix.poetry-version }}

      - name: Install the project dependencies
        run: poetry install

      - name: Merge xunit reports
        run: |
          shopt -s globstar
          poetry run junitparser merge .output/unittest/**/*.xml .output/unittest/merged.xml

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: unittest-report
          path: .output/unittest/merged.xml

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v4
        if: always()
        with:
          report_paths: .output/unittest/merged.xml
          include_passed: true

  sonarqube:
    needs: consolidation
    if: always()
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]
        poetry-version: ["1.7.1"]
        os: ["ubuntu-22.04"]

    runs-on: ${{ matrix.os }}
    env:
      TERM: xterm-color
    steps:
      # NOTE: sonarqube doesn't like shallow checkout
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup poetry
        uses: ./.github/actions/setup-poetry
        with:
          python-version: ${{ matrix.python-version }}
          poetry-version: ${{ matrix.poetry-version }}

      - name: Install the project dependencies
        run: poetry install

      - name: Download artifacts (merged unittest report)
        uses: actions/download-artifact@v4
        with:
          pattern: unittest-report
          path: .output/unittest
          merge-multiple: true

      - name: Download artifacts (coverage reports)
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-reports-*
          path: .output/coverage
          merge-multiple: true

      - name: Sonarqube Analysis
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
          SONAR_PROJECT_KEY: ${{ vars.SONAR_PROJECT_KEY }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # If you wish to fail your job when the Quality Gate is red, uncomment the
      # following lines. This would typically be used to fail a deployment.
      - uses: sonarsource/sonarqube-quality-gate-action@master
        if: ${{ github.event_name != 'pull_request' }}
        timeout-minutes: 5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_PROJECT_KEY: ${{ vars.SONAR_PROJECT_KEY }}
          SONAR_ORGANIZATION: ${{ vars.SONAR_ORGANIZATION }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  publish:
    needs: sonarqube
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]
        poetry-version: ["1.7.1"]
        os: ["ubuntu-22.04"]

    runs-on: ${{ matrix.os }}
    env:
      TERM: xterm-color
    steps:
      # NOTE: semantic-release requires tags
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup poetry
        uses: ./.github/actions/setup-poetry
        with:
          python-version: ${{ matrix.python-version }}
          poetry-version: ${{ matrix.poetry-version }}

      - name: Install the project dependencies
        run: poetry install --with=release -E docs

      - name: Build docs
        run: poetry run make -C docs html

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        with:
          publish_branch: gh-pages
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: docs/build/html
          force_orphan: true

      - name: Semantic Release
        uses: ./.github/actions/semantic-release
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          # pypi-token: ${{ secrets.PYPI_TOKEN }}

      - name: Read pyproject.toml
        id: read-package
        uses: SebRollen/toml-action@v1.2.0
        with:
          file: pyproject.toml
          field: tool.poetry.version

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}


      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ github.repository }}
          tags: |
            type=semver,pattern={{version}},value=${{ steps.read-package.outputs.value }}
            type=semver,pattern={{major}}.{{minor}},value=${{ steps.read-package.outputs.value }}
            type=semver,pattern={{major}},value=${{ steps.read-package.outputs.value }}
            # set latest tag for default branch
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
